import boto3
import json
import time

def lambda_handler(event, context):
    # set things
    AccessToken = event['queryStringParameters']['AccessToken']
    ConnectionID = event['requestContext']['connectionId']
    DynamoDB = boto3.resource('dynamodb')
    
    
    
    print(AccessToken)
    
    
    
    
    
    # set Email from AccessToken
    DDBResult = DynamoDB.Table('Credentials').get_item(Key = {'Key': AccessToken})
    
    print(DDBResult)
    
    
    
    
    if 'Item' not in  DDBResult:
        print('11111')
        return {'statusCode': 400}
        
        
        
    # wss://h3i8pfh151.execute-api.ap-southeast-1.amazonaws.com/production?AccessToken=NzIzZGVmNGUtYjk2My00ZGY4LWE0OGItMzk0ZWY0MWZmODgw
    
        
    Email = DDBResult['Item']['Email']
    print(Email)
    
    # check Email if member
    
    
    
    
    
    
    
    
    
    
    # check Email's pre connection
    DDBResult = DynamoDB.Table('7PokerConnections').get_item(Key = {'Key': Email})
    if 'Item' in  DDBResult:
        print('22222')
        return {'statusCode': 400}
        
    # save ConnectionID and Email
    NewConnection = {}
    NewConnection['Key'] = ConnectionID
    NewConnection['Email'] = Email
    DynamoDB.Table('7PokerConnections').put_item(Item = NewConnection)
    
    NewConnection = {}
    NewConnection['Key'] = Email
    NewConnection['ConnectionID'] = ConnectionID
    DynamoDB.Table('7PokerConnections').put_item(Item = NewConnection)
    
    return {'statusCode': 200}


























'''
# check Gap
Gap = int(time.time()) - DDBResult['Item']['IssueTime']
if Gap > 3000:
    DynamoDB.Table('Credentials').delete_item(Key = {'AccessToken': AccessToken})
    return {'statusCode': 400}
        
    
# check if connection id is
DDBResult = DynamoDB.Table('Members').get_item(Key = {'Email': DDBResult['Item']['Email']})
if 'ConnectionID' in DDBResult['Item']:
    return {'statusCode': 400}
    
# update Member
DDBResult['Item']['ConnectionID'] = ConnectionID
DynamoDB.Table('Members').put_item(Item = DDBResult['Item'])

# save connection
NewConnection = {}
NewConnection['ConnectionID'] = ConnectionID
NewConnection['Email'] = DDBResult['Item']['Email']
DynamoDB.Table('7PokerConnections').put_item(Item = NewConnection)
'''
'''



if 'ConnectionID' in DDBResult['Item']:
    return {'statusCode': 400}
    
# update AccessToken
DDBResult['Item']['ConnectionID'] = event['requestContext']['connectionId']
boto3.resource('dynamodb').Table('Credentials').put_item(Item = DDBResult['Item'])


print(DDBResult['Item'])
#{'AccessToken': 'YWYwNTY3NmEtNzY1NC00YzlhLThhMzgtOTA4OWFlODQ3NjIy', 'IssueTime': Decimal('1685187114'), 'Email': 'sunyi233@gmail.com'}

    
    
    

'''
'''
if 'queryStringParameters' in event:
print(event['queryStringParameters'])




print(event['requestContext']['connectionId'])



# add item
NewCID = {}
NewCID['CID'] = event['requestContext']['connectionId']
boto3.resource('dynamodb').Table('Chat-CIDs').put_item(Item = NewCID)






if 'queryStringParameters' in event:
print(event['queryStringParameters'])
'''




import base64
import boto3
import simplejson as json
import time
import uuid

def lambda_handler(event, context):
    # set things
    ConnectionID = event['requestContext']['connectionId']
    Message = json.loads(event['body'])
    
    if 'Command' in Message:
        if Message['Command'] == 'Join':
            ReturnCode = ProcessJoinCommand(ConnectionID, Message)
        elif Message['Command'] == 'Start':
            ReturnCode = ProcessStartCommand(ConnectionID)
        elif Message['Command'] == 'Finish':
            ReturnCode = ProcessFinishCommand(ConnectionID, Message)
    elif 'Play' in Message:
        
        
        print('play')
        
        
        
        ReturnCode = ProcessDiscardedPlay(ConnectionID, Message)
        
        
        
        
        
        
    
    '''
    
    
    # do things
    if Message['Command'] == 'Join':
        ReturnCode = ProcessJoinCommand(ConnectionID, Message)
    elif Message['Command'] == 'Start':
        ReturnCode = ProcessStartCommand(ConnectionID)
    elif Message['Command'] == 'Finish':
        ReturnCode = ProcessFinishCommand(ConnectionID, Message)
        
    elif Message['Play'] == 'Discarded':
        ReturnCode = ProcessDiscardedPlay(ConnectionID, Message)
        
        
    '''
    
        
        
        
        
        
        
        
        
        
        
        
        
        
    return {'statusCode': ReturnCode}
    
def ProcessDiscardedPlay(ConnectionID, Message):
    
    
    
    SendWebsocketMessage(ConnectionID, 'Open')
    
    
    



    #SendWelcomeMessage(ConnectionID, 'Open')
    
    
    


    print(Message)
    
    
    '''
    {"Play": "Discarded"}
    
    
    DA, D2, D3, D9, DT, DJ, DQ, DK
    
    
    7PokerDealerCards
    
    
    TheGame['GameID']
    
        
        
    DealerCardsTable = boto3.resource('dynamodb').Table('7PokerDealerCards')
    
    
    
    
    
    '''
    

    
    
    
    
    
    return 200
    
def ProcessFinishCommand(ConnectionID, Message):
    # set Email, GameID, GameType
    TheConnectionTable = boto3.resource('dynamodb').Table('7PokerConnections')
    DDBResult = TheConnectionTable.get_item(Key = {'Key': ConnectionID})
    if 'Item' not in  DDBResult:
        return 400

    Email = DDBResult['Item']['Email']
    GameID = DDBResult['Item']['GameID']
    GameType = DDBResult['Item']['GameType']

    # set Players, PlayersCount
    TheGameTable = boto3.resource('dynamodb').Table('7PokerGames-' + GameType)
    DDBResult = TheGameTable.get_item(Key = {'Status': 'Playing', 'GameID': GameID})
    if 'Item' not in  DDBResult:
        return 400

    Players = DDBResult['Item']['Players']
    PlayersCount = len(Players)

    # save result
    TheResultTable = boto3.resource('dynamodb').Table('7PokerGameResults')
    
    NewResult = {}
    NewResult['GameID'] = GameID
    NewResult['Email'] = Email
    NewResult['Result'] = ConnectionID # 임시
    TheResultTable.put_item(Item = NewResult)
    
    # when all players reported
    DDBResult = TheResultTable.query(KeyConditionExpression = boto3.dynamodb.conditions.Key('GameID').eq(GameID), ScanIndexForward = True)
    if DDBResult['Count'] == PlayersCount: # all reported
        # save the final result
        NewResult = {}
        NewResult['GameID'] = GameID
        NewResult['Email'] = 'All'
        NewResult['Result'] = 'werqtgqertg'
        TheResultTable.put_item(Item = NewResult)
        
        # delete the game
        TheGameTable.delete_item(Key = {'Status': 'Playing', 'GameID': GameID})
        
        # update connections
        for ThisPlayerConnectionID in Players:
            # update connections
            TheConnection = TheConnectionTable.get_item(Key = {'Key': ThisPlayerConnectionID})['Item']
            print(TheConnection)
            
            del TheConnection['GameID']
            del TheConnection['GameType']
            
            TheConnectionTable.put_item(Item = TheConnection)
            
            # send to all
            SendWebsocketMessage(ThisPlayerConnectionID, '{"Report": "Finished", "Result": "wertgwersyghert"}')
            
    return 200

def ProcessStartCommand(ConnectionID):
    # get game id from ConnectionID
    TheConnectionTable = boto3.resource('dynamodb').Table('7PokerConnections')
    DDBResult = TheConnectionTable.get_item(Key = {'Key': ConnectionID})
    GameID = DDBResult['Item']['GameID']
    GameType = DDBResult['Item']['GameType']

    # change game status
    TheGameTable = boto3.resource('dynamodb').Table('7PokerGames-' + GameType)
    DDBResult = TheGameTable.get_item(Key = {'Status': 'Ready', 'GameID': GameID})
    if 'Item' not in  DDBResult: # 이미 다른 선수가 스타트 시킨 경우
        return 400
        
    DDBResult['Item']['Status'] = 'Playing'
    TheGameTable.put_item(Item = DDBResult['Item'])
    
    TheGameTable.delete_item(Key = {'Status': 'Ready', 'GameID': GameID})
    
    # set AllPlayers
    AllPlayers = []
    for ThisPlayerConnectionID in DDBResult['Item']['Players']:
        ThisPlayer = GetPlayerInfo(ThisPlayerConnectionID)
        if ThisPlayer == {}:
            return 400
            
        AllPlayers.append(ThisPlayer)
        
    # send message to all
    Message = {}
    Message['Report'] = 'Players'
    Message['Players'] = AllPlayers
    
    for ThisPlayerConnectionID in DDBResult['Item']['Players']:
        SendWebsocketMessage(ThisPlayerConnectionID, json.dumps(Message))

    # send first cards to all
    Message = {}
    Message['Play'] = 'Dealing'
    Message['Cards'] = ["H2", "C5", "D1", "C2"]

    for ThisPlayerConnectionID in DDBResult['Item']['Players']:
        SendWebsocketMessage(ThisPlayerConnectionID, json.dumps(Message))
        
    return 200

def ProcessJoinCommand(ConnectionID, Message):
    TheConnectionTable = boto3.resource('dynamodb').Table('7PokerConnections')
    TheGameTable = boto3.resource('dynamodb').Table('7PokerGames-' + Message['GameType'])
    
    # check connection if already in a game
    DDBResult = TheConnectionTable.get_item(Key = {'Key': ConnectionID})
    if 'Item' not in  DDBResult:
        return 400
        
    if 'GameID' in DDBResult['Item']:
        return 400
        
    # find a game with ready to join
    ReadyGaems = TheGameTable.query(KeyConditionExpression = boto3.dynamodb.conditions.Key('Status').eq('Ready'), ScanIndexForward = True)['Items']
    if ReadyGaems != []:
        
        
        
        
        
        SendWelcomeMessage(ConnectionID, ReadyGaems[0]['GameID'])
        
        
        
        
        
        
        
        
        
        








        return 200
        
    # find waiting games
    WaitingGaems = TheGameTable.query(KeyConditionExpression = boto3.dynamodb.conditions.Key('Status').eq('Waiting'), ScanIndexForward = True)['Items']
    if WaitingGaems != []:
        TheGame = WaitingGaems[0]
        
        # update connection table
        DDBResult = TheConnectionTable.get_item(Key = {'Key': ConnectionID})
        DDBResult['Item']['GameID'] = TheGame['GameID']
        DDBResult['Item']['GameType'] = Message['GameType']
        TheConnectionTable.put_item(Item = DDBResult['Item'])
        
        # update game table
        TheGame['Players'].append(ConnectionID)
        TheGameTable.put_item(Item = TheGame)
        
        # send welcome
        SendWelcomeMessage(ConnectionID, TheGame['GameID'])
        
        # follow up for the reday case
        if len(TheGame['Players']) == 3:
            # change status of the game by deleting the old one and adding a new one
            TheGame['Status'] = 'Ready'
            TheGameTable.put_item(Item = TheGame)
            
            TheGameTable.delete_item(Key = {'Status': 'Waiting', 'GameID': TheGame['GameID']})
            
            # send ready to all players
            for ThisPlayer in TheGame['Players']:
                SendWebsocketMessage(ThisPlayer, '{"Report": "Ready"}')
                
                
                
                
                # [ERROR] GoneException: An error occurred (GoneException) when calling the PostToConnection operation:
                
                
                
                
                
                
                
                
                
                
                
            # add all cards to the game dealer
            DealerCardsTable = boto3.resource('dynamodb').Table('7PokerDealerCards')
            
            
            NewCard = {}
            NewCard['GameID'] = TheGame['GameID']
            NewCard['Cards'] = ['DA', 'D2']
            DealerCardsTable.put_item(Item = NewCard)
            
            
            
            
            
            
            
            
                
                
                
                
                
                
                
                
                
                
                
                
                
                

        return 200
    
    # make a new waiting game
    GameID = str(base64.b64encode(str(uuid.uuid4()).encode("utf-8")), "utf-8")
    
    DDBResult = TheConnectionTable.get_item(Key = {'Key': ConnectionID})
    DDBResult['Item']['GameID'] = GameID
    DDBResult['Item']['GameType'] = Message['GameType']
    TheConnectionTable.put_item(Item = DDBResult['Item'])
    
    NewGame = {}
    NewGame['Status'] = 'Waiting'
    NewGame['GameID'] = GameID
    NewGame['StartTime'] = 0
    NewGame['EndTime'] = 0
    NewGame['Players'] = []
    NewGame['Players'].append(ConnectionID)
    TheGameTable.put_item(Item = NewGame)
    
    SendWelcomeMessage(ConnectionID, GameID)
    
    return 200
    
def SendWelcomeMessage(ConnectionID, GameID):
    # set ThePlayer
    ThePlayer = GetPlayerInfo(ConnectionID)
    if ThePlayer == {}:
        return 400
        
    # send
    NewWelcome = {}
    NewWelcome['Report'] = 'Welcome'
    NewWelcome['GameID'] = GameID
    NewWelcome['Nickname'] = ThePlayer['Nickname']
    NewWelcome['GamePoint'] = ThePlayer['GamePoint']
    NewWelcome['PictureURL'] = ThePlayer['PictureURL']
    SendWebsocketMessage(ConnectionID, json.dumps(NewWelcome))
    
    return 200

def GetPlayerInfo(ConnectionID):
    DynamoDB = boto3.resource('dynamodb')
    
    # set Email
    DDBResult = DynamoDB.Table('7PokerConnections').get_item(Key = {'Key': ConnectionID})
    if 'Item' not in  DDBResult:
        return {}
        
    Email = DDBResult['Item']['Email']
    
    # set ThePlayer
    DDBResult = DynamoDB.Table('Members').get_item(Key = {'Email': Email})

    ThePlayer = {}
    ThePlayer['Nickname'] = DDBResult['Item']['Nickname']
    ThePlayer['GamePoint'] = DDBResult['Item']['GamePoint']
    ThePlayer['PictureURL'] = DDBResult['Item']['PictureURL']

    return ThePlayer
    
def SendWebsocketMessage(ConnectionID, Push):
    
    
    
    # try catch 
    
    
    TheClient = boto3.client('apigatewaymanagementapi', endpoint_url = 'https://h3i8pfh151.execute-api.ap-southeast-1.amazonaws.com/production')
    TheClient.post_to_connection(ConnectionId = ConnectionID, Data = Push)
    return










import boto3
import json

def lambda_handler(event, context):
    # set things
    ConnectionID = event['requestContext']['connectionId']
    TheConnectionTable = boto3.resource('dynamodb').Table('7PokerConnections')
    TheConnection = TheConnectionTable.get_item(Key = {'Key': ConnectionID})['Item']

    # delete connections
    TheConnectionTable.delete_item(Key = {'Key': ConnectionID})
    TheConnectionTable.delete_item(Key = {'Key': TheConnection['Email']})
    
    # delete the connection from the game
    if 'GameID' in TheConnection:
        TheGameTable = boto3.resource('dynamodb').Table('7PokerGames-' + TheConnection['GameType'])
        
        DDBResult = TheGameTable.get_item(Key = {'Status': 'Waiting', 'GameID': TheConnection['GameID']})
        if 'Item' in DDBResult:
            UpdateGame(TheGameTable, DDBResult['Item'], ConnectionID)
            
        DDBResult = TheGameTable.get_item(Key = {'Status': 'Ready', 'GameID': TheConnection['GameID']})
        if 'Item' in DDBResult:
            UpdateGame(TheGameTable, DDBResult['Item'], ConnectionID)

            
            

            
            
    return {'statusCode': 200}
    
def UpdateGame(TheGameTable, TheGame, ConnectionID):
    TheGame['Players'].remove(ConnectionID)
    if len(TheGame['Players']) == 0:
        TheGameTable.delete_item(Key = {'Status': TheGame['Status'], 'GameID': TheGame['GameID']})
    else:
        TheGameTable.put_item(Item = TheGame)
        
    return


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
'''

# update 7PokerConnections
DynamoDB.Table('7PokerConnections').delete_item(Key = {'ConnectionID': event['requestContext']['connectionId']})

# update Members
DDBResult = DynamoDB.Table('Members').get_item(Key = {'Email': Email})
del DDBResult['Item']['ConnectionID']
DynamoDB.Table('Members').put_item(Item = DDBResult['Item'])
'''








import base64
import boto3
import simplejson as json
import time
import urllib3
import uuid

def lambda_handler(event, context):
    PostedBody = json.loads(event['body'])
    
    
    
    print(event['headers']['referer'])    
    
    
    

    # set Email
    try:
        GoogleAccount = json.loads(urllib3.PoolManager().request('GET', 'https://oauth2.googleapis.com/tokeninfo?id_token=' + PostedBody['GIDT']).data)
    except Exception as e:
        return {'statusCode':400}
        
    if 'error' in GoogleAccount:
        return {'statusCode':400}
        
    Email = GoogleAccount['email']
    
    # check if Email is
    DDBResult = boto3.resource('dynamodb').Table('Members').get_item(Key = {'Email': Email})
    if 'Item' in  DDBResult:
        return {'statusCode':400}
        
    # check Referrer and add it
    if 'Referrer' in PostedBody:
        DDBResult = boto3.resource('dynamodb').Table('Members').get_item(Key = {'Email': PostedBody['Referrer']})
        if 'Item' not in  DDBResult:
            return {'statusCode':400}
            
        # add NewReferral
        NewReferral = {}
        NewReferral['Referrer'] = PostedBody['Referrer']
        NewReferral['Referee'] = Email
        boto3.resource('dynamodb').Table('Referrals').put_item(Item = NewReferral)
        
    # add NewMember
    NewMember = {}
    NewMember['Email'] = Email
    NewMember['GamePoint'] = 0
    NewMember['JoinTime'] = int(time.time())
    NewMember['Nickname'] = Email.split('@')[0]
    NewMember['PictureURL'] = 'default'
    
    if 'Referrer' in PostedBody:
        NewMember['Referrer'] = PostedBody['Referrer']
        
    boto3.resource('dynamodb').Table('Members').put_item(Item = NewMember)
    
    # add Access Token
    AccessToken = str(base64.b64encode(str(uuid.uuid4()).encode("utf-8")), "utf-8")
    
    NewMember['AccessToken'] = AccessToken
    
    NewCredential = {}
    NewCredential['Key'] = AccessToken
    NewCredential['Email'] = Email
    NewCredential['IssueTime'] = int(time.time())
    boto3.resource('dynamodb').Table('Credentials').put_item(Item = NewCredential)
    
    NewCredential = {}
    NewCredential['Key'] = Email
    NewCredential['AccessToken'] = AccessToken
    boto3.resource('dynamodb').Table('Credentials').put_item(Item = NewCredential)
    
    return {'statusCode': 200, 'body': json.dumps(NewMember)}
    
    
    
    
    
    
    import boto3
import json
import time
import urllib3

def lambda_handler(event, context):
    
    
    
    print(event['headers']['referer'])
    
    
    
    
    # set AccessToken
    if event['headers']['authorization'].startswith('Bearer ') == False:
        return {"isAuthorized":False}
        
    AccessToken = event['headers']['authorization'][7:]
    
    # check AccessToken
    DDBResult = boto3.resource('dynamodb').Table('Credentials').get_item(Key = {'AccessToken': AccessToken})
    if 'Item' not in  DDBResult:
        return {"isAuthorized":False}
        
    # check Gap
    Gap = int(time.time()) - DDBResult['Item']['IssueTime']
    if Gap > 3000:
        boto3.resource('dynamodb').Table('Credentials').delete_item(Key = {'AccessToken': AccessToken})
        return {"isAuthorized":False}
        
    return {"isAuthorized": True, "context": {"Email": DDBResult['Item']['Email']}}




























'''
print(DDBResult['Item'])
{'AccessToken': 'N2FlY2IzNWMtZjNhYS00NjM2LWE5NmQtZTYxMzg2NmI5M2Uy', 'IssueTime': Decimal('1684470396'), 'Email': 'hyun5929@gmail.com'}


print(DDBResult['Item'])
{'AccessToken': 'MWFjYTg2MDktMjVlNS00YTQ4LWE5YzYtZDZiMTZjNTZmOGEx', 'IssueTime': Decimal('1684403972'), 'Email': 'nujnow@gmail.com'}



NewCredential = {}
NewCredential['AccessToken'] = AccessToken
NewCredential['Email'] = Email
NewCredential['IssueTime'] = int(time.time())
boto3.resource('dynamodb').Table('Credentials').put_item(Item = NewCredential)
'''
'''
# check and set GIDT
if event['headers']['authorization'].startswith('Bearer ') == False:
    return {"isAuthorized":False}
    
GIDT = event['headers']['authorization'][7:]

# set GoogleAccount by calling google api
try:
    GoogleAccount = json.loads(urllib3.PoolManager().request('GET', 'https://oauth2.googleapis.com/tokeninfo?id_token=' + GIDT).data)
except Exception as e:
    return {"isAuthorized":False}
    
# check error
if 'error' in GoogleAccount:
    return {"isAuthorized":False}
    
# retun GoogleAccount
'''







import boto3
import simplejson as json

def lambda_handler(event, context):
    Result = []
    
    DDBResult = boto3.resource('dynamodb').Table('7PokerGameTypes').scan()
    Result.extend(DDBResult['Items'])
    
    return {'statusCode': 200, 'body': json.dumps(Result, ensure_ascii=False)}
    
    
    





import base64
import boto3
import simplejson as json
import time
import urllib3
import uuid

def lambda_handler(event, context):
    PostedBody = json.loads(event['body'])
    DynamoDB = boto3.resource('dynamodb')
    
    
    
    
    print(event['headers']['referer'])
    
    
    
    
    # set Email
    try:
        GoogleAccount = json.loads(urllib3.PoolManager().request('GET', 'https://oauth2.googleapis.com/tokeninfo?id_token=' + PostedBody['GIDT']).data)
    except Exception as e:
        return {'statusCode':400}
        
    if 'error' in GoogleAccount:
        return {'statusCode':400}
        
    Email = GoogleAccount['email']
    
    # set Member
    DDBResult = DynamoDB.Table('Members').get_item(Key = {'Email': Email})
    if 'Item' not in  DDBResult:
        return {'statusCode':400}
        
    Member = DDBResult['Item']
    
    # check access token and connection id to clean
    DDBResult = DynamoDB.Table('Credentials').get_item(Key = {'Key': Email})
    if 'Item' in  DDBResult:
        DynamoDB.Table('Credentials').delete_item(Key = {'Key': DDBResult['Item']['AccessToken']})
        DynamoDB.Table('Credentials').delete_item(Key = {'Key': Email})
        
    DDBResult = DynamoDB.Table('7PokerConnections').get_item(Key = {'Key': Email})
    if 'Item' in  DDBResult:
        DynamoDB.Table('7PokerConnections').delete_item(Key = {'Key': DDBResult['Item']['ConnectionID']})
        DynamoDB.Table('7PokerConnections').delete_item(Key = {'Key': Email})
        
    # add Access Token
    AccessToken = str(base64.b64encode(str(uuid.uuid4()).encode("utf-8")), "utf-8")
    
    Member['AccessToken'] = AccessToken
    
    NewCredential = {}
    NewCredential['Key'] = AccessToken
    NewCredential['Email'] = Email
    NewCredential['IssueTime'] = int(time.time())
    DynamoDB.Table('Credentials').put_item(Item = NewCredential)
    
    NewCredential = {}
    NewCredential['Key'] = Email
    NewCredential['AccessToken'] = AccessToken
    DynamoDB.Table('Credentials').put_item(Item = NewCredential)
    
    return {'statusCode': 200, 'body': json.dumps(Member)}





















    
    
    
    
    
    
    
    
'''
Member = {"Email":"eragsaer@gmail.com", "NickName":"eragsaer", "CRAAddress":"rtewgyhwrtyhwrtyhwrt", "CRABalance":1234354, "PictureURL":"eargwerstg/eargersag.jpg", "AccessToken":"awreygewr6tujhetydujetyujetyd"}





print(json.dumps(GoogleAccount,  ensure_ascii = False))
{
    "iss": "https://accounts.google.com",
    "nbf": "1684243139",
    "aud": "648238993995-5o7ngepm6pt38l80tlqatkkvfq7vagil.apps.googleusercontent.com",
    "sub": "108847279922941251164",
    "email": "sunyi233@gmail.com",
    "email_verified": "true",
    "azp": "648238993995-5o7ngepm6pt38l80tlqatkkvfq7vagil.apps.googleusercontent.com",
    "name": "이상선",
    "picture": "https://lh3.googleusercontent.com/a/AGNmyxateRtPU_WphCQjf6MfMuSZjbGehs1RdVr7vXXL-j0=s96-c",
    "given_name": "상선",
    "family_name": "이",
    "iat": "1684243439",
    "exp": "1684247039",
    "jti": "6241fee1cbb84e783e6f2a74f4fa1953e29c218a",
    "alg": "RS256",
    "kid": "822838c1c8bf9edcf1f5050662e54bcb1adb5b5f",
    "typ": "JWT"
}    















'''
'''



    # add NewMember
    NewMember = {}
    NewMember['Email'] = Email
    NewMember['GamePoint'] = 0
    NewMember['JoinTime'] = int(time.time())
    NewMember['Nickname'] = Email.split('@')[0]
    NewMember['PictureURL'] = 'default'
    
    if 'Referer' in PostedBody:
        NewMember['Referer'] = PostedBody['Referer']
        
        # add NewReferral
        NewReferral = {}
        NewReferral['Referer'] = PostedBody['Referer']
        NewReferral['Referee'] = Email
        boto3.resource('dynamodb').Table('Referrals').put_item(Item = NewReferral)
        
    boto3.resource('dynamodb').Table('Members').put_item(Item = NewMember)
    
    Member = NewMember
else:
    Member = DDBResult['Item']
    
    
'''






import boto3
import json

def lambda_handler(event, context):
    Email = event['requestContext']['authorizer']['lambda']['Email']
    
    Result = []
    for ThisReferral in boto3.resource('dynamodb').Table('Referrals').query(KeyConditionExpression = boto3.dynamodb.conditions.Key('Referrer').eq(Email), ScanIndexForward = True)['Items']:
        Result.append(ThisReferral['Referee'])
        

    return {'statusCode': 200, 'body': json.dumps(Result)}
    
    
    
    



import base64
import boto3
import json
import time
import uuid

def lambda_handler(event, context):
    PostedBody = json.loads(event['body'])
    DynamoDB = boto3.resource('dynamodb')
    
    print(event['headers']['referer'])
    
    # check OldAccessToken and Gap
    DDBResult = DynamoDB.Table('Credentials').get_item(Key = {'Key': PostedBody['OldAccessToken']})
    if 'Item' not in  DDBResult:
        return {'statusCode':400}
        
    Gap = int(time.time()) - DDBResult['Item']['IssueTime']
    if Gap <= 3000:
        return {'statusCode':400}
        
    # set Email
    Email = DDBResult['Item']['Email']
    
    # delete old one
    DynamoDB.Table('Credentials').delete_item(Key = {'Key': PostedBody['OldAccessToken']})
    DynamoDB.Table('Credentials').delete_item(Key = {'Key': Email})
    
    # add new one
    NewAccessToken = str(base64.b64encode(str(uuid.uuid4()).encode("utf-8")), "utf-8")
    
    NewCredential = {}
    NewCredential['Key'] = NewAccessToken
    NewCredential['Email'] = Email
    NewCredential['IssueTime'] = int(time.time())
    DynamoDB.Table('Credentials').put_item(Item = NewCredential)
    
    NewCredential = {}
    NewCredential['Key'] = Email
    NewCredential['AccessToken'] = NewAccessToken
    DynamoDB.Table('Credentials').put_item(Item = NewCredential)
    
    return {'statusCode': 200, 'body': json.dumps({"NewAccessToken": NewAccessToken})}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
'''



print(event)
{
    'version': '2.0', 
    'routeKey': 'POST /GetRenewedAccessToken', 
    'rawPath': '/GetRenewedAccessToken', 
    'rawQueryString': '', 
    
    'headers': 
    {
        'accept': '*/*', 
        'accept-encoding': 'gzip, deflate, br', 
        'accept-language': 'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7', 
        'authorization': 'Bearer null', 
        'content-length': '69', 
        'content-type': 'text/plain;charset=UTF-8', 
        'dnt': '1', 
        'host': 'dhdfk9v0a7.execute-api.ap-southeast-1.amazonaws.com', 
        'origin': 'https://craclegames.com', 
        'referer': 'https://craclegames.com/', 
        'sec-ch-ua': '"Google Chrome";v="113", "Chromium";v="113", "Not-A.Brand";v="24"', 
        'sec-ch-ua-mobile': '?0', 
        'sec-ch-ua-platform': '"macOS"', 
        'sec-fetch-dest': 'empty', 
        'sec-fetch-mode': 'cors', 
        'sec-fetch-site': 'cross-site', 
        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36', 
        'x-amzn-trace-id': 'Root=1-64705c63-3ee832de5923810417f54e18', 
        'x-forwarded-for': '114.203.38.57', 
        'x-forwarded-port': '443', 
        'x-forwarded-proto': 'https'
        
    }, 
    
    'requestContext': {'accountId': '762603074169', 'apiId': 'dhdfk9v0a7', 'domainName': 'dhdfk9v0a7.execute-api.ap-southeast-1.amazonaws.com', 'domainPrefix': 'dhdfk9v0a7', 'http': {'method': 'POST', 'path': '/GetRenewedAccessToken', 'protocol': 'HTTP/1.1', 'sourceIp': '114.203.38.57', 'userAgent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36'}, 'requestId': 'FhNfqhkrSQ0EJ_g=', 'routeKey': 'POST /GetRenewedAccessToken', 'stage': '$default', 'time': '26/May/2023:07:14:43 +0000', 'timeEpoch': 1685085283916}, 
    'body': '{"OldAccessToken":"OTAwYTc5MmYtNDllYi00OWI2LWE3MWQtMTMwM2E5ZTQ5ZTVj"}', 
    'isBase64Encoded': False
}
'''








import boto3
import json

def lambda_handler(event, context):
    Email = event['requestContext']['authorizer']['lambda']['Email']
    PostedBody = json.loads(event['body'])
    
    # update
    DDBResult = boto3.resource('dynamodb').Table('Members').get_item(Key = {'Email': Email})
    DDBResult['Item']['Nickname'] = PostedBody['NewNickname']
    boto3.resource('dynamodb').Table('Members').put_item(Item = DDBResult['Item'])
    
    return {'statusCode': 200}
    
    
    
    
import boto3
import json

def lambda_handler(event, context):
    Email = event['requestContext']['authorizer']['lambda']['Email']
    PostedBody = json.loads(event['body'])
    
    # update
    DDBResult = boto3.resource('dynamodb').Table('Members').get_item(Key = {'Email': Email})
    DDBResult['Item']['PictureURL'] = PostedBody['NewPictureURL']
    boto3.resource('dynamodb').Table('Members').put_item(Item = DDBResult['Item'])
    
    return {'statusCode': 200}    
